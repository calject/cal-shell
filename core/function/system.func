# 定义函数 $1: 处理路径(#分割) $2: 默认路径(默认为当前执行路径)
function _handle_path() {
    for path (${s/#/${1}}) {
        if [[ $path == /* ]] {
            print $path
        } elif [[ $path == (~/|./)* ]] {
            print ${path/(\~|\.)/${2:-$(pwd)}}
        } else {
            print ${2:-$(pwd)}/$path
        }
    }
}

# 获取路径下文件列表 $1: 文件路径(多个文件路径以空格分隔) $2: 默认路径(默认为当前执行路径)
# 查询所有文件(包含目录文件,防止空目录引起的print no matches found: 错误)
function _get_all_file_path() {
    for path (${=1}) {
        path=$(_handle_path $path ${2:-$(pwd)})
        if [[ -d $path ]] {
            print -l $path/**/*
        } elif [[ -f $path ]] {
            print $path
        }
    }
}

# 获取拓展文件路径(直接读取全局变量$plugin_path)
# 直接一层判断查询文件名及后缀
function _get_plugin_file_path() {
    if [[ -n $plugin_path ]] {
        for path ($plugin_path) {
            path=$(_handle_path ${path} ${2:-$(pwd)})
            if [[ -d $path ]] {
                for suffix ($plugin_suffix) {
                    [[ -f $path/${suffix/\*/$1} ]] && {
                        print $path/${suffix/\*/$1}
                        exit 0
                    }
                }
            } elif [[ -f $path ]] {
                print $path
                exit 0
            }
        }
    }
}

# command alias
function _cmd_handle() {
    source $CAL_HOME/core/script/handle.zsh
}

# 进程显示(版本兼容原因: maps=(xx)不写在一行)
function _process() {
    local -A maps
    local lev head='' info=${2:-'info'}
    maps=(process green info cyan notice yellow put blue warning red error red)
    [[ $info == *ln ]] && info=${info%%ln} && head="\n"
    (($+maps[$info])) && lev=$maps[$info] || lev=cyan
    if ((${is_process})) {
        [[ -n $1 ]] && print -P "%F{${lev}}${head}[${info}]: $1%f" || print ""
    }
}

# 检查并创建目录
function _mkdir() {
    for _dir ($*) {
        _path=$home/$_dir
        if [[ ! -d $_path ]] {
            _process "mkdir -p $_path" info
            mkdir -p $_path
        } else {
            _process "$_path is existed!" notice
        }
    }
    unset _path _dir
}

# 清理
function _clear() {
    [[ -d $home && $home != '/' && $home != $HOME && $home != (~?|~|.|.?) && $home != $(pwd) ]] && {
        print -nP "清理目录%F{red}${home}%f(%F{yellow}y%f/%F{red}n%f): "
        read -q is_run
        print
        if [[ $is_run == 'y' && $home != $HOME && $home != / && $home != ~ ]]  {
            _process "/bin/rm -rf $home" notice
            /bin/rm -rf $home
        } else {
            print -P "%F{red}cancel.%f"
            exit 999
        }
    }
}

# 清理
function _handle_exit_code() {
    ERROR_CODE="$?"
    (($ERROR_CODE!=0)) && (($ERROR_CODE!=999)) && {
        _failure "\nan error occurred. cleaning up now... ";
        _failure "DONE.\nExiting with error code ${ERROR_CODE}.";
        _clear
    }
    exit ${ERROR_CODE};
}

function _running() {
    print -P "%F{cyan}$*%f"
}

function _success() {
    print -P "%F{green}$*%f"
}

function _failure() {
    print -P "%F{red}$*%f"
}

function _error() {
    print -P "%F{red}$*%f"
    exit 999
}

# trim
function _trim() {
    echo $1 | awk '$1=$1'
}